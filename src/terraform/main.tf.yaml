variable:
  billing_account:
    description: ID of the billing account to use for the project.
    type: string
    nullable: false
  bucket:
    description: The terraform state bucket.
    type: string
    nullable: false
  vm_managers:
    description: Name of group with permisions to activate and deactivate the server.
    type: string
  credentials_file:
    description: Path to the credentials file.
    type: string
    nullable: false
  host_image:
    description: Reference to base image.
    type: string
    nullable: false
  machine_type:
    description: The instance type to use for the minecraft server.
    type: string
    nullable: false
  network_name:
    description: The name of the network the server resides in.
    type: string
    default: minecraft-network
    nullable: false
  org_id:
    description: The name of hosting organization's ID.
    nullable: false
  project_id:
    description: The Google Cloud project ID.
    type: string
    nullable: false
  region:
    description: The region where to build the project.
    type: string
    default: us-central1
    nullable: false
  host_name:
    description: Name of cloudcraft's minecraft server.
    default: cloudcraft-host
    nullable: false
  server_type:
    description: Takes 'java' or 'bedrock'.
    default: bedrock
    nullable: false
  zone:
    description: The zone where to build the project.
    type: string
    default: us-central1-c
    nullable: false

locals:
  server_image: '${var.server_type == "bedrock" ? "itzg/minecraft-bedrock-server" : "itzg/minecraft-server"}'
  ext_port: '${var.server_type == "bedrock" ? 19132 : 25565}'
  server_protocol: '${var.server_type == "bedrock" ? "udp" : "tcp"}'
  host_bind_dir:
    value: /var/lib/docker/cloudcraft
    description: "The path on the host instance to bind to the container's '/data' dir where all the world and other server state files are stored. Because the container optimized image limits '/var' in general with noexec, we store it under the docker working dir because it is stateful and allows execution. Refer to: https://cloud.google.com/container-optimized-os/docs/concepts/security#filesystem for details on the COS mount permissions."

terraform:
  backend:
    gcs: # this will safe the statefile in the GC bucket
      prefix: minecraft/state
      bucket: ~~ var.bucket ~~ # this is replaced by the value from 'liquid-minecraft.tfvars.json'
  required_providers:
    google:
      source: hashicorp/google
      version: '>= 4.27.0'

provider:
  google:
    project: ${var.project_id}
    region: ${var.region}
    zone: ${var.zone}

resource:
  # Create a project where the resources live
  google_project:
    liquid-labs-minecraft:
      name: ${var.project_id}
      project_id: ${var.project_id}
      org_id: ${var.org_id}
      billing_account: ${var.billing_account}
      auto_create_network: false
  
  # Enable services.
  google_project_service:
    compute_api:
      project: ${var.project_id}
      service: compute.googleapis.com
      
  # Create service account to run service with no permissions
  google_service_account:
    minecraft_service_acct:
      account_id: ll-minecraft-service-acct
      display_name: minecraft_runner
      
  # Permenant Minecraft disk, stays around when VM is off
  google_compute_disk:
    cloudcraft_disk:
      name: cloudcraft-disk
      type: pd-standard
      zone: ${var.zone}
      image: ${var.host_image}
      size: 20
      lifecycle:
        prevent_destroy: false #true
    
  # Permenant IP address, stays around when VM is off
  google_compute_address:
    minecraft_ip:
      name: minecraft-ip
      region: ${var.region}
  
  # Create a private network so the minecraft instance cannot access any other resources.
  google_compute_network:
    minecraft_network:
      name: ${var.network_name}
      auto_create_subnetworks: false
  
  google_compute_subnetwork:
    minecraft_subnet:
      name: minecraft-subnet
      ip_cidr_range: 10.2.0.0/16
      region: ${var.region}
      network: "${google_compute_network.minecraft_network.id}"
  
  # VM to run Minecraft, we use preemptable which will shutdown within 24 hours
  google_compute_instance:
    cloudcraft_host:
      description: Hosts the cloudcraft server container.
      name: ${var.host_name}
      machine_type: ${var.machine_type}
      zone: ${var.zone}
      tags: ["minecraft", "ssh"]
      allow_stopping_for_update: true
      metadata_startup_script: |
        {
          echo "Starting at $(date)"
          mkdir -p ${local.host_bind_dir.value}
          echo "
        # credit to https://www.redhat.com/sysadmin/systemd-automate-recovery
        # credit to https://gist.github.com/dotStart/ea0455714a0942474635
        [Unit]
        Description=cloudcraft-server
        # Try 8 times, waiting 15 seconds in between each before giving up (2 min total)
        StartLimitIntervalSec=15
        StartLimitBurst=8
        # Call cleanup script if necessary:
        # OnFailure=my-app-recovery.service

        [Service]
        User=root
        WorkingDirectory=/var/lib/docker
        ExecStart=/bin/bash -c 'docker rm mc || true; \
        docker run \
          --detach \
          --interactive \
          --tty \
          -p ${local.ext_port}:${local.ext_port}/${local.server_protocol} \
          -e EULA=TRUE \
          -e VERSION=LATEST \
          -v ${local.host_bind_dir.value}:/data \
          --name mc \
          -e MEMORY=4G \
          ${local.server_image}:latest >> /var/log/mc-docker-run.log 2>&1'
        Restart=always
        
        [Install]
        WantedBy=multi-user.target" > /etc/systemd/system/cloudcraft.service && systemctl enable cloudcraft && systemctl start cloudcraft
        } >> /var/log/startup-script.log 2>&1
      
      metadata:
        enable-oslogin: true
      boot_disk:
        auto_delete: false
        source: "${google_compute_disk.cloudcraft_disk.self_link}"
      network_interface:
        network: "${google_compute_network.minecraft_network.id}"
        subnetwork: "${google_compute_subnetwork.minecraft_subnet.id}"
        network_ip: 10.2.0.100
        access_config:
          nat_ip: "${google_compute_address.minecraft_ip.address}"
      can_ip_forward: true
      service_account:
        email: ll-minecraft-service-acct@liquid-labs-minecraft.iam.gserviceaccount.com # google_service_account.minecraft_service_acct.email
        scopes: ["userinfo-email"]
      scheduling:
        preemptible: true # Closes within 24 hours (sometimes sooner)
        automatic_restart: false
        provisioning_model: SPOT
        instance_termination_action: STOP
  
  google_compute_firewall:
    ssh:
      name: ssh
      network: ${var.network_name}
      allow:
        - protocol: tcp
          ports: ["22", "${local.ext_port}"]
      direction: INGRESS
      priority: 1000
      source_ranges: ["0.0.0.0/0"]
      target_tags: ["ssh"]
    ping:
      name: ping
      network: ${var.network_name}
      allow:
        - protocol: icmp # ping
      direction: INGRESS
      priority: 1000
      source_ranges: ["0.0.0.0/0"]
    minecraft_service:
      name: minecraft-service
      network: ${var.network_name}
      allow:
        - protocol: tcp
          ports: ["${local.ext_port}"]
        - protocol: udp
          ports: ["${local.ext_port}"]
      direction: INGRESS
      priority: 1000
      source_ranges: ["0.0.0.0/0"]
      target_tags: ["minecraft"]
  
  google_project_iam_custom_role:
    minecraft_switcher:
      role_id: minecraft_switcher
      title: Minecraft Switcher
      description: Can turn a VM on and off
      permissions:
        - compute.instances.start
        - compute.instances.stop
        - compute.instances.get
    instance_lister:
      description: Can list VMs in project
      role_id: minecraft_instances_lister
      title: Instance Lister
      permissions:
        - compute.instances.list
  
  google_compute_instance_iam_binding:
    switcher:
      project: ${var.project_id}
      zone: ${var.zone}
      instance_name: "${google_compute_instance.cloudcraft_host.name}"
      role: "${google_project_iam_custom_role.minecraft_switcher.id}"
      members:
        - "group:${var.vm_managers}"
  
  google_project_iam_member:
    projectBrowsers:
      project: ${var.project_id}
      role: roles/browser
      member: group:${var.vm_managers}
    computeViewer:
      project: ${var.project_id}
      role: "${google_project_iam_custom_role.instance_lister.id}" # roles/minecraft_instances_lister
      member: "group:${var.vm_managers}"
# end resources
      
output:
  project_id:
    value: ${var.project_id}
    description: Outputs the 'final' project ID. If the original project ID provided at creation was too short or there was a name collision, then the ID may be updated during the project creation process so this output value should always be used in all subsequent actions.
